PlantData:
  Description: General information about the plant.
  Properties:
    SomeProperty:
      Type: String
      Description: An example string property
  _sub:
    Space:
      _sub:
        Cartesian:
          Description: Defines a physical real world cartesian space.
          Properties:
            SpatialContextDocumentId:
              Type: Reference
              ReferencedClass: Assets.Intangibles.Documents
              Description: reference to asset (a file) that points to a 3D model
            DimensionCount:
              Type: Number
              Description: number of dimensions in range [1,3]
              MinValue: 1
              MaxValue: 3
            Units:
              Type: String
              Description: meter, feet, whatever
              Example: meter
            Description:
              Type: String
              Description: Describes where the origo and axis is in the real world.
          InputTo:
            - VRDose
            - RadPIM

    SiteStructure:
      _sub:
        Buildings:
          Description: Information about buildings in the plant
          Properties:
            Name:
              Type: String
              Example: Reactor hall
            IFCObject:
              Type: Def
              Definition: $defs.IFCObjectReference
              Optional: TRUE
              Description: reference to a model of the building
        Floors:
          Description: Information about floors in the buildings
          Properties:
            BuildingId:
              Type: Reference
              ReferencedClass: PlantData.SiteStructure.Buildings
            Number:
              Type: String
              Description: Readable identification (Number) of the floor
            IFCObject:
              Type: Def
              Definition: $defs.IFCObjectReference
              Optional: TRUE
              Description: reference to a model of the floor
            Elevation:
              Type: Decimal
              Unit: m
              Description: Elevation of the floor relative to the ground. Can be negative.
        Rooms:
          Description: Information about rooms in all buildings
          Properties:
            FloorId:
              Type: Reference
              ReferencedClass: PlantData.SiteStructure.Floors
            Number:
              Type: String
              Description: Readable identification (Number) of the room
            IFCObject:
              Type: Def
              Definition: $defs.IFCObjectReference
              Optional: TRUE
              Description: reference to a model of the room
            Width:
              Type: Decimal
              Unit: m
            Height:
              Type: Decimal
              Unit: m
            Length:
              Type: Decimal
              Unit: m

    NuclideVectors:
      Description: Definition of nuclide vectors used for describing various plant's objects and their activities or contaminations.
      Properties:
        Name:
          Type: String
          Description: Name of the vector, can be used e.g. for human-readable description of the vector's content.
          Optional: TRUE
        Isotopes:
          Type: Def
          Definition: $defs.NuclideVector
          Description: List of isotopes and their relative amounts in the nuclide vector.
          Unit: N/A
          # Example: {
          #   "Co-60": 0.15,
          #   "Cs-137": 0.85,
          # }

    RadiationSources:
      Description: List of radiation sources inside the plant.
      Properties:
        Shape:
          Type: Def
          Definition: $defs.Shape
          Description: Definition of the source's shape
        Location:
          Type: Def
          Definition: $defs.CartesianPoint
          Description: Location of the [0, 0, 0] point of the radiation source.
        MeasurementIds:
          Type: Array[RecordId]
          ReferencedClass: Assets.Intangibles.Measurements.CartesianMeasurements
          Description: List of measurements performed over this radiation source.

Events:
  Description: |
    List of various events that occured during the decommissioning planning.
    An example: A Collada file must be created from an IFC model for VTT's XR toolkit
    in order to create VirtualPostIt. Both Collada file and IFC model are stored
    in the PlantData.Documents. This class can be used to store the information
    about from which IFC model is a certain Collada file created.
  Properties:
    DateTime:
      Type: DateTime
      Description: When did the event occur.
    Type:
      Type: String
      Description: |
        Type of an event. Can have any value.
        In this spec the values are not restricted.<br/>
        However, this property can be used for various filtering/querying
        purposes and thus should be brief and agreed by partners
        using a specific type of event.<br/>
        Event's type can determine the structure of RelatedRecordIds property.
        In this example, the first related RecordId is the original IFC model and the
        second is the corresponding Collada file.
      Examples: [
        "Ifc2Collada conversion",
        "Visual inspection of component",
        "Safety incident"
      ]
    Message:
      Type: String
      Description: Any string value containing more verbose message (comparing to Type)
    RelatedRecordIds:
      Type: Array[Def]
      Definition: $defs.RelatedRecord
      Description:
        This property should be used in case this event is related to a specific record(s) in the database
        which does not have a direct link to events (like e.g. Assets.Intangibles.Parts or Tasks)

Applications:
  Description: List of applications used in the project. An application can be understood as an answer to "Why we are doing a task?".
  Properties:
    Name:
      Type: String
      Examples: [
        "Decommissioning",
        "Size reduction",
        "Decontamination",
        "Waste management",
      ]

Tasks:
  Description: Single task to be performed
  Properties:
    Name:
      Type: String
      Description: Human-readable name of the task
    Number:
      Type: String
      Description: Number of the task
    Definition:
      Type: String
      Description: Definition of the task
    ParentTaskId:
      Type: RecordId
      ReferencedClass: Tasks
    DependendsOnTaskIds:
      Type: Array[RecordId]
      ReferencedClass: Tasks
      Description: Which tasks must be performed before this task.
    Start:
      Type: DateTime
      Description: Date and time of task start.
    Duration:
      Type: Decimal
      Description: Operation duration in hours.
      MinValue: 0
    TeamId:
      Type: Reference
      ReferencedClass: Actors.Teams
      Description: Reference to the team performing the task
    ApplicationId:
      Type: Reference
      ReferencedClass: Applications
      Description: Type of the application that is being performed in this task.
    WorkplaceId:
      Type: Reference
      ReferencedClass: Workplaces
      Description: >
        Workplace where the task is performed.
        Used e.g. for dose rate calculations during the application.
    InputAssetIds:
      Type: Array[Def]
      Definition: $defs.RelatedRecord
      ReferencedClass: [
        Assets.Tangibles.Parts,
        Assets.Tanglibles.Tools,
        Assets.Tanglibles.Consumables,
        Assets.Intangibles.Measurements
      ]
      Description: >
        Which assets are being processed by this task and are necessary
        to perform the task.
      Example: [
          {
              "Class": "Assets.Tangibles.Parts",
              "RecordId": "2ba907f6-289e-c411-7403-20623ee0584a"
          },
          {
              "Class": "Assets.Tangibles.Tools",
              "RecordId": "8f65e3ea-d453-ccfd-9acf-e4c940cc1cf0"
          },
          {
              "Class": "Assets.Tangibles.Consumables",
              "RecordId": "8f65e3ea-d453-ccfd-9acf-e4c940cc1cf0"
          },
          {
              "Class": "Assets.Intangibles.Measurements.PartMeasurements",
              "RecordId": "8f65e3ea-d453-ccfd-9acf-e4c940cc1cf0"
          }
      ]
    OutputAssetIds:
      Type: Array[Def]
      Definition: $defs.RelatedRecord
      ReferencedClass: [
        Assets.Tangibles.Parts,
        Assets.Intangibles.Measurements
      ]
      Description: >
        What assets (fragments, primary/secondary wastes, packages, ...) are generated by this task.
      Example: [
          {
              "Class": "Assets.Tangibles.Parts",
              "RecordId": "2ba907f6-289e-c411-7403-20623ee0584a"
          },
          {
              "Class": "Assets.Tangibles.Tools",
              "RecordId": "8f65e3ea-d453-ccfd-9acf-e4c940cc1cf0"
          },
          {
              "Class": "Assets.Tangibles.Equipment",
              "RecordId": "8f65e3ea-d453-ccfd-9acf-e4c940cc1cf0"
          }
      ]
    MethodIds:
      Type: Array[RecordId]
      ReferencedClass: Methods
    ExposedWorkers:
      Type: Number
      Description: Number of workers exposed during the operation
    DocumentIds:
      Type: Array[RecordId]
      ReferencedClass: Assets.Intangibles.Documents
      Description: List of documents related to this task.
    # SafetyCriteriaId:
    #   Type: Reference
    #   ReferencedClass: Safety.Criteria
    #   Description: Definition of safety criteria for this task.
    RiskIds:
      Type: Array[RecordId]
      ReferencedClass: Safety.Risks.Register
      Description: List of risks related to this task.
    # RiskAssessment:
    #   Type: Array[Def]
    #   Definition: $defs.RiskAssessment
    #   Description: Assessment of risks associated to this task.
    EventIds:
      Type: Reference
      ReferencedClass: Events
      Description: List of events associated with this task.
    UnitCostFactors:
      Type: Def
      Definition: $defs.UnitCostFactors
      Description: Various unit cost factors for this task.
    Costs:
      Type: Def
      Definition: $defs.Costs
      Description: Various cost data (absolute values, not unit factors) for this task.
  InputTo:
    - iDrop
    - AquilaCosting
    - DEMPlus
    - VRDose

Methods:
  Description: List of methods used in the project. An application can be understood as an answer to "How we are doing a task?".
  Properties:
    Name:
      Type: String
      Description: Human readable name of the method.
      Example: Radiological characterisation with robot ABC-XYZ.
    Description:
      Type: String
      Optional: TRUE
      Description: More verbose description of the method.
    Category:
      Type: Def
      Definition: $defs.ClassName
      Description: Categorization of the method for better querying/filtering experience.
      Examples: [
        "Methods.Characterization.RadiologicalCharacterization",
        "Method.WasteManagement.SuperCompacting",
        "Method.WasteManagement.Packaging"
      ]
    ApplicationIds:
      Type: Array[RecordId]
      ReferencedClass: Applications
    RoleIds:
      Type: Array[RecordId]
      ReferencedClass: Actors.Roles
    ToolIds:
      Description: What tool(s) is used to perform the task using this method.
      Type: Array[RecordId]
      ReferencedClass: Assets.Tangibles.Tools
    TechnicalParameters:
      Type: Object
      Description: Object containing technical parameters of the method. Structure of the object is not strictly specified.
      Examples: [
        { "FractionOfWaste": "...", "PackagingEfficiency": "..." }
      ]
    UnitCostFactors:
      Type: Def
      Definition: $defs.UnitCostFactors
      Description: Various unit cost factors for this method.
    Costs:
      Type: Def
      Definition: $defs.Costs
      Description: Various cost data (absolute values, not unit factors) for this method.
  InputTo:
    - iDrop
    - AquilaCosting
    - DEMPlus
    - VRDose

Workplaces:
  Description: List of workplaces and associated data
  # Note: |
  #   Dusan: Mathieu, Not sure if this is the right class name.
  #   Nicolas: I want to define that there are different workplaces where an operator can work from. This will then be linked to the % of exposure that an operator can take. For example we often use “workstation” ; “assistance” ; “in a airlock” or even “in the building”, which corresponds to where operators are, there aren’t always taking 100% of the dose rate at the workstation. I have to define that because there is only one calculated dose rate, from where the avatar is standing.
  Properties:
    Name:
      Type: String
    RoomId:
      Type: Reference
      ReferencedClass: PlantData.SiteStructure.Rooms
      Description: In which room is the workplace is located
    ExposureType:
      Type: String
      ValidValues: ["Constant", "Percentage"]
      Description: Define if exposure is constant (µSv/h) or depending on dose calculation (% of exposure)
    ExposurePercentage:
      Type: Number
      Unit: "%"
      MinValue: 0
      MaxValue: 100
      Description: |
        This property defines the percentage of calculated dose rate at the avatar position to be taken by the worker.
        For example, we define that the operator in the airlock behind takes only 20% of the calculated dose rate.<br/>
        <br/>
        This property is used only when ExposureType = Percentage.
    ExposureConstant:
      Type: Decimal
      Unit: µSv/h
      Description: |
        Similar to ExposurePercentage, this property defines the constant dose uptake by the worker at the workplace.<br/>
        <br/>
        This property is used only when ExposureType = Constant.
    WorkDifficultyFactors:
      Type: Object
      Description: Structure containing definition of work difficulty factors.
  InputTo:
    - DEMPlus

# Schedule:
#   Description: Schedule of the Tasks to be performed
#   Note: Needs review.
#   Properties:
#     Name:
#       Type: String
#       Example: Remove hotspots in the steam generator
#     TaskIds:
#       Type: Array[RecordId]
#       Description: List of Tasks performed in this schedule. The order of tasks is important.


Assets:
  Description:
  _sub:
    Tangibles:
      _sub:
        Parts:
          Description:
            List of items that are used during the decommissioning project
            or are to be decommissioned.
            Contains e.g. SSCs, Waste inventory, ...
          Properties:
            ParentPartId:
              Type: Reference
              ReferencedClass: Assets.Tangibles.Parts
              Description: In case of more complex systems, this is the way to define hierarchical structure of parts.
            ParentWasteId:
              Type: Reference
              ReferencedClass: Assets.Tangibles.Parts
              Description: If this Part is already a waste, using this Id we can reference to a waste package.
            Type:
              Type: String
              Description: Type of the part.
              ValidValues: [
                "System",
                "Structure",
                "Component",
                "Fragment",
                "Waste",
                "Waste package"
              ]
            SiteStructureId:
              Type: Reference
              ReferencedClass: [PlantData.SiteStructure.Buildings, PlantData.SiteStructure.Floors, PlantData.SiteStructure.Rooms]
              Description: In which building/floor/room is the part (or the whole object) located
            IFCObject:
              Type: Def
              Definition: $defs.IFCObjectReference
              Optional: TRUE
              Description: reference to a model of the part
            Status:
              Note: Needs review, suggested by Patrice
              Type: String
              ValidValues: ["Use for operation", "To be dismantled (when? attach it to a task?)"]
            EventIds:
              Type: Reference
              ReferencedClass: Events
              Description: |
                List of events associated with this part.
                E.g. if some visual inspection finds a corrosion, an event should be created and linked with this part.
            Mass:
              Type: Decimal
              Unit: kg
              Description: Mass
            Volume:
              Type: Decimal
              Unit: m3
              Description: Volume
            InnerSurface:
              Type: Decimal
              Unit: m2
              Description: Inner surface
            OuterSurface:
              Type: Decimal
              Unit: m2
              Description: Outer surface
            MaterialId:
              Type: Reference
              ReferencedClass: Materials
            MeasurementIds:
              Type: Array[Def]
              Definition: $defs.Measurements
              Description: >
                List of measurements performed on this Object.
            DocumentIds:
              Type: Array[RecordId]
              ReferencedClass: Assets.Intangibles.Documents
              Description: List of documents related to this part.
            # SafetyCriteriaId:
            #   Type: Reference
            #   ReferencedClass: Safety.Criteria
            #   Description: Definition of safety criteria for this part.
            RiskIds:
              Type: Array[RecordId]
              ReferencedClass: Safety.Risks.Register
              Description: List of risks related to this part (component).
            WastePackageTypeId:
              Type: Reference
              ReferencedClass: Wastes.PackageTypes
            WasteCategoryId:
              Type: Reference
              ReferencedClass: Safety.Regulatory.WasteCategories
            NonExistentSince:
              Type: Date
              Description: >
                Date, when this part was completely "destroyed", e.g. valve has been dismantled,
                reactor tank has been fragmented or walls have been demolished.
            UnitCostFactors:
              Type: Def
              Definition: $defs.UnitCostFactors
              Description: Various unit cost factors for this part.
            Costs:
              Type: Def
              Definition: $defs.Costs
              Description: Various cost data (absolute values, not unit factors) for this part.
          InputTo:
            - DEMPlus
            - AquilaCosting
            - VRDose

        Tools:
          Description: List of tool used to perform tasks. E.g. Robot or telemanipulator to be simulated.
          Properties:
            Name:
              Type: String
              Description: Name of the tool.
              Example: Grinder
            ManufacturerName:
              Type: String
              Description: Name of the tool manufacturer
            URDFKinematicDocumentId:
              Type: Reference
              ReferencedClass: Assets.Intangibles.Documents
            UnitCostFactors:
              Type: Def
              Definition: $defs.UnitCostFactors
              Description: Various unit cost factors for this task.
            Costs:
              Type: Def
              Definition: $defs.Costs
              Description: Various cost data (absolute values, not unit factors) for this task.

        Equipments:
          Description: |
            List of equipment used to perform tasks.
            Examples: glove boxes, protection tents, ventilations, mobile shielding.
          Properties:
            Name:
              Type: String
              Description: Name of the equipment.
              Examples: [
                "glove boxes", "protection tents", "ventilations", "mobile shielding"
              ]
            UnitCostFactors:
              Type: Def
              Definition: $defs.UnitCostFactors
              Description: Various unit cost factors for this task.
            Costs:
              Type: Def
              Definition: $defs.Costs
              Description: Various cost data (absolute values, not unit factors) for this task.

        Consumables:
          Description: List of consumables.
          Properties:
            Name:
              Type: String
              Description: Name of the consumable.
              Examples: [
                "Face mask",
                "Cutting wheel"
              ]
            UnitCostFactors:
              Type: Def
              Definition: $defs.UnitCostFactors
              Description: Various unit cost factors for this task.
            Costs:
              Type: Def
              Definition: $defs.Costs
              Description: Various cost data (absolute values, not unit factors) for this task.

    Intangibles:
      _sub:

        Documents:
          Description: All documents related to the plant.
          Properties:
            Type:
              Description: Type of the document
              Type: String
              Examples: ["BIMModel", "3DModel", "URDF", "Photo", "Video", "PointCloud", "AssetBundle", "InvestigationData", "Safety", "Other"]
            File:
              Type: FileURI
              Description: Reference to asset (a file) that points to a document
            SpaceId:
              Type: Reference
              ReferencedClass: PlantData.Space.Cartesian
              Optional: TRUE
              Description: For documents that contain coordinates. Defines which space the coordinates belong to. 

        Measurements:
          _sub:
            CartesianMeasurements:
              Description: A set where each element is a cartesian coordinate associated with a single values.
              Properties:
                MeasuredQuantity:
                  Type: Def
                  Definition: $defs.MeasuredQuantity
                  Description: What is measured, (Dose, DoseRate, Activity, Temperature, ...)
                Description:
                  Type: String
                  Description: Optional description
                  Example: DoseRate measurements from reactor hall
                MeasurementTime:
                  Type: DateTime
                  Description: When the measurement has been taken.
                SpaceId:
                  Type: Reference
                  ReferencedClass: PlantData.Space.Cartesian
                RoomId:
                  Type: Reference
                  ReferencedClass: PlantData.SiteStructure.Rooms
                  Description: In which room is the measurement was taken
                MethodId:
                  Type: Reference
                  ReferencedClass: Methods
                  Description: Optional reference to the Method used to do the measurements
                Coordinate:
                  Type: Def
                  Definition: $defs.CartesianPoint
                Value:
                  Type: Def
                  Definition: $defs.MeasuredValue
              InputTo:
                - VRDose
                - iDrop
              OutputFrom:
                - RadPIM

            CartesianMeasurementSets:
              Description: A set where each element is a cartesian coordinate associated with a single values.
              Properties:
                MeasuredQuantity:
                  Type: Def
                  Definition: $defs.MeasuredQuantity
                  Description: What is measured, (Dose, DoseRate, Activity, Temperature, ...)
                Description:
                  Type: String
                  Description: Optional description
                  Example: DoseRate measurements from reactor hall
                MeasurementTime:
                  Type: DateTime
                  Description: When the measurements has been taken.
                SpaceId:
                  Type: Reference
                  ReferencedClass: PlantData.Space.Cartesian
                MethodId:
                  Type: Reference
                  ReferencedClass: Methods
                  Description: Optional reference to the Method used to do the measurements
                RoomIds:
                  Type: Array[RecordId]
                  ReferencedClass: PlantData.SiteStructure.Rooms
                  Description: In which rooms was the measurements taken. Order of items must correspond to Coordinates and Values properties.
                Coordinates:
                  Type: Array[Def]
                  Definition: $defs.CartesianPoint
                Values:
                  Type: Array[Def]
                  Definition: $defs.MeasuredValue
              InputTo:
                - VRDose
                - iDrop
              OutputFrom:
                - RadPIM

            PartMeasurements:
              Description: Class for storing measurement samples on parts that is associated with that part, but do not have a clear coordinate(s).
              Properties:
                MethodId:
                  Type: Reference
                  ReferencedClass: Methods
                  Description: Optional reference to the Method used to do the measurements
                MeasuredQuantity:
                  Type: Def
                  Definition: $defs.MeasuredQuantity
                  Description: What is measured, (Dose, DoseRate, Activity, Temperature, ...)
                Description:
                  Type: String
                  Description: Optional description
                  Example: DoseRate measurements from reactor hall
                MeasurementTime:
                  Type: DateTime
                  Description: When the measurement has been taken.
                Value:
                  Type: Def
                  Definition: $defs.MeasuredValue

        VirtualPostIts:
          Description: Virtual Post-it notes generated by XR workflow
          Properties:
            UserId:
              Type: Reference
              ReferencedClass: Actors.Persons
            Type:
              Type: String
              Example: PostItNoteDataLog
            AssetBundleDocumentId:
              Type: Reference
              ReferencedClass: Assets.Intangibles.Documents
              Description: Reference to a document containing asset bundle data.
            IFCModelDocumentId:
              Type: Reference
              ReferencedClass: Assets.Intangibles.Documents
              Description: Reference to an IFC model from which the Asset Bundle was created.
            Notes:
              Type: Array[Object]
              Example: [
                 {
                  "title": "Test 1",
                  "description": "Demo",
                  "creationTime": "2022-02-28T12:08:32.7069137Z",
                  "parentGUID": "1572_01_node-SOLSub",
                  "colorIndex": 0,
                  "position": {
                      "x": -7.662808418273926,
                      "y": -3.8867058753967287,
                      "z": -9.801565170288086
                  },
                  "rotation": {
                      "x": 0.0,
                      "y": 1.0,
                      "z": 0.0,
                      "w": 1.8622769992759914e-9
                  }
                },
                {
                  "title": "Test 2",
                  "description": "Demo",
                  "creationTime": "2022-02-28T12:08:43.8828763Z",
                  "parentGUID": "1572_01_node-SOLSub",
                  "colorIndex": 5,
                  "position": {
                      "x": -9.57817268371582,
                      "y": -4.623129367828369,
                      "z": -9.801566123962403
                  },
                  "rotation": {
                      "x": 0.0,
                      "y": 1.0,
                      "z": 0.0,
                      "w": 1.8622769992759914e-9
                  }
                }
              ]
        SpatialTemporals:
          Description: Spatial-temporal data generated by XR workflow
          Properties:
            UserId:
              Type: Reference
              ReferencedClass: Actors.Persons
            Type:
              Type: String
              Example: DataLogV3
            AssetBundleDocumentId:
              Type: Reference
              ReferencedClass: Assets.Intangibles.Documents
              Description: Reference to a document containing asset bundle data.
            IFCModelDocumentId:
              Type: Reference
              ReferencedClass: Assets.Intangibles.Documents
              Description: Reference to an IFC model from which the Asset Bundle was created.
            DataPoints:
              Type: Array[Object]
              Example: [
                {
                  "time": "2022-02-28T12:08:18.1611882Z",
                  "position": {
                    "x": -13.5,
                    "y": -5.599999904632568,
                    "z": -12.000000953674317
                  },
                  "rotation": {
                    "x": 0.001572699286043644,
                    "y": 6.768838822779344e-10,
                    "z": -0.00006257450877455994,
                    "w": 0.9999988079071045
                  }
                },
                {
                  "time": "2022-02-28T12:08:18.9231873Z",
                  "position": {
                    "x": -13.499999046325684,
                    "y": -5.599999904632568,
                    "z": -11.498950004577637
                  },
                  "rotation": {
                    "x": 0.001572699286043644,
                    "y": 6.768838822779344e-10,
                    "z": -0.00006257450877455994,
                    "w": 0.9999988079071045
                  }
                }
              ]
          OutputFrom:
            - XR workflow

        Calculations:
          _sub:
            DoseUptake:
              Description: Cumulative dose to a person or equipment calculated in the simulations
              Properties:
                TaskId:
                  Type: Reference
                  ReferencedClass: Tasks
                ActorId:
                  Type: Reference
                  ReferencedClass: [Actors.Persons, Actors.Robots, Actors.Teams]
                MeasuredQuantity:
                  Type: Def
                  Definition: $defs.MeasuredQuantity
                  Description: |
                    What does the Value represent.
                    Example: For calculators there are different ways to convert photon energy into dose, for example Effective Dose, Ambient Dose Equivalent or KERMA.
                Value:
                  Type: Decimal
                  Unit: based on MeasuredQuantity
                  Description: Calculated dose uptake
                CartesianPoint:
                  Type: Def
                  Definition: $defs.CartesianPoint
              OutputFrom:
                - iDrop

Materials:
  Description: List of Material characteristics
  Properties:
    Name:
      Type: String
      Example: >
        "Water" or "Stainless steel"
    VolumicMass:
      Type: Decimal
      Unit: g/cm3
      Description: Volumic mass
    ChemicalComposition:
      Type: Object
      Description: Chemical composition of the material
      Example: { "H": 1, "O": 2 }
  InputTo:
    - DEMPlus
    - AquilaCosting

Actors:
  _sub:
    Persons:
      Description: An individual who conducts the task.
      Properties:
        GivenName:
          Type: String
        FamilyName:
          Type: String
        AvailableRoleIds:
          Type: Array[RecordId]
          ReferencedClass: Actors.Roles
        UnitCostFactors:
          Type: Def
          Definition: $defs.UnitCostFactors
          Description: Various unit cost factors for this person.
        Costs:
          Type: Def
          Definition: $defs.Costs
          Description: Various cost data (absolute values, not unit factors) for this person.
      InputTo:
        - iDrop
    Robots:
      Description: List of available Robots
      Properties:
        Name:
          Type: String
        ManufacturerName:
          Type: String
        MaintenanceProportion:
          Type: Decimal
          Unit: "%"
          Optional: TRUE
          Description: Percentage of additionnal time of maintenance over an activity
        UnitCostFactors:
          Type: Def
          Definition: $defs.UnitCostFactors
          Description: Various unit cost factors for this robot.
        Costs:
          Type: Def
          Definition: $defs.Costs
          Description: Various cost data (absolute values, not unit factors) for this robot.
      InputTo:
        - iDrop
    Roles:
      Description: List of roles available for the persons
      Properties:
        Name:
          Type: String
          Example: Skilled worker
        EfficiencyCoefficient:
          Type: Decimal
          Unit: "%"
          Optional: TRUE
          Description: 100% is normal, 200% with hard working conditions
        UnproductiveTime:
          Type: Decimal
          Unit: hrs/d
          Optional: TRUE
        EffectiveWorkdayHours:
          Type: Decimal
          Unit: hrs/d
          Optional: TRUE
          Description: |
            Maximum work duration per day. E.g., specific legislations obliges to work only 3 hourse per day in a mururoa suit.<br/>
            <br/>
            Note: This is EFFECTIVE working time according to the regulation of the outfit worn and not the total working time of a day.
        HourlySalary:
          Type: Decimal
          Unit: €/h
          Description: A hourly salary for this role
    Teams:
      Description: Definition of a team consisting of Persons (a.k.a. working groups)
      Properties:
        Name:
          Type: String
          Example: Piping cutters
        MemberIds:
          Type: Array[Def]
          Definition: $defs.TeamMember
          Description: >
            List of members of the team. Multiple types of actors are allowed.
            Each actor is defined by the class name and record ID.
        EffectiveWorkdayHours:
          Type: Decimal
          Unit: hrs/d
          Optional: TRUE
          Description:
            This is relevant only for "teleoperation" teams - the teams containing at least one robot.
            It represents the proportion for "Work/Maintenance".
        WorkerExposure:
          Type: Decimal
          Unit: µSv/h
          Optional: TRUE
          Description: Exposure of human operators to maintain the robot.
      InputTo:
        - iDrop
        - AquilaCosting
        - DEMPlus

Safety:
  _sub:
    Regulatory:
      Description: Definition of regulatory-specific data
      _sub:
        Frameworks:
          Description: Each country can have its own framework
          Properties:
            Country:
              Type: String
              Description: To which country does this framework belong.
              Example: France
            Description:
              Type: String
              Description: Brief description of the framework.
            Requirements:
              Type: Object
              Description: Arbitrary object describing safety requirements given by the regulatory framework.
              Example: {
                "RadonAccumulationLimit": "...",
                "MaxIndividualDose": "...",
                "ObjectiveIndividualDose": "...",
                "ObjectiveCollectiveDose": "...",
                "ContaminationLimitedValue": "..."
              }
            DocumentIds:
              Type: Array[RecordId]
              ReferencedClass: Assets.Intangibles.Documents
              Description: List of documents related to this framework
        WasteAcceptanceCriterias:
          Description: Definition of clearance limits.
          Properties:
            RegulatoryFrameworkId:
              Type: Reference
              ReferencedClass: Safety.Regulatory.Frameworks
              Description: To which framework does this criteria belong.
            Name:
              Type: String
              Description: Name of the WAC
              Examples: ["Exempt waste", "LLW Disposal", "VLLW Disposal", "Conditional release", "Storage"]
            ActivityLimit:
              Type: Def
              Definition: $defs.NuclideVector
              Description: Definition of limit values per isotope.
              Unit: Bq/kg
            ContaminationLimit:
              Type: Def
              Definition: $defs.NuclideVector
              Description: Definition of limit values per isotope.
              Unit: Bq/m2
        WasteCategories:
          Description: List of waste categories
          Note: Needs review.
          Properties:
            RegulatoryFrameworkId:
              Type: Reference
              ReferencedClass: Safety.Regulatory.Frameworks
              Description: To which framework does this waste category belong.
            Name:
              Type: String
              Description: Name of the waste category
              ValidValues: [EW, VLLW, LLW, ILW]
            WasteAcceptanceCriteriaId:
              Type: Reference
              ReferencedClass: Safety.Regulatory.WasteAcceptanceCriterias
              Description: Definition of limits (WACs) for this waste category.

    # Criteria:
    #   Description: Definition of safety criteria for {{Assets.Tangibles.Parts}} or {{Tasks}}
    #   Properties:
    #     Name:
    #       Type: String
    #       Description: Readable name of the criteria definition
    #     Criteria:
    #       Type: Object
    #       Example: {
    #         "RadonAccumulationLimit": "...",
    #         "OperatingLimitsAndConditions": "...",
    #         "RiskRequirement": "...",
    #         "AccidentalIncidentCriteria": "...",
    #         "SafetyFunctions": "...",
    #         "SafetyImportance": ".."
    #       }
    #     DocumentIds:
    #       Type: Array[RecordId]
    #       ReferencedClass: Assets.Intangibles.Documents
    #       Description: List of documents related to this criteria.
    #     OperatingLimitsAndConditions:
    #       Deprecated: TRUE
    #       Note: Not specified
    #     RiskRequirement:
    #       Deprecated: TRUE
    #       Note: Not specified
    #     AccidentalIncidentCriteria:
    #       Deprecated: TRUE
    #       Note: Not specified
    #     SafetyFunctions:
    #       Deprecated: TRUE
    #       Note: Suggested to be string. Shouldn't it be more structured?
    #       Type: String
    #       Description: Safety functions the SSC participates with, e.g. spread of contamination, heat removal, criticality)
    #     SafetyImportance:
    #       Deprecated: TRUE
    #       Type: Number
    #       MinValue: 0
    #       Description:
    #         Assessment of importance. Higher number means higher importance.
    #         0 = not related to safety.
    Risks:
      _sub:
        # Categories:
        #   Description: Definition of risk categories that can occur during decommissioning
        #   Properties:
        #     Name:
        #       Type: String
        #       Description: Name of the risk category
        #       Examples: ["Fall from height", "Higher dose uptake", "Hydrogen production"]
        #     Type:
        #       Type: String
        #       Description: Type of the category of the risk.
        #       ValidValues: [
        #         "Safety",
        #         "Project",
        #         "Task",
        #         "Component",
        #       ]
        Register:
          Description: List of risks that can occur during decommissioning
          Properties:
            Name:
              Type: String
              Description: Short name of the risk
            Description:
              Type: String
              Description: Description of the risk
            Type:
              Type: String
              Description: Type of the category of the risk.
              ValidValues: [
                "Safety",
                "Project",
                "Security"
              ]
            # CategoryId:
            #   Type: Reference
            #   ReferencedClass: Safety.Risks.Categories
            #   Description: Category of the risk
            DocumentIds:
              Type: Array[RecordId]
              ReferencedClass: Assets.Intangibles.Documents
              Description: List of documents related to this risk.
            # Assessment:
            #   Type: Def
            #   Definition: $defs.RiskAssessment
            #   Description: Assessment of risks.
            Parameters:
              Type: Object
              Description: Object containing the parameters of the risk. Structure of the object is determined by the category of the risk.
              Examples: [
                {
                  "SubstanceType": "...",
                  "NumberOfBarriers": "...",
                  "ConainmentNature": "...",
                  "MonitoringSystems": "..."
                },
                {
                  "FireSafetyComponents": "...",
                  "DismantlingMethods": "..."
                },
                {
                  "RadonAccumulationLimit": "...",
                  "MaxIndividualDose": "...",
                  "ObjectiveIndividualDose": "...",
                  "ObjectiveCollectiveDose": "...",
                  "ContaminationLimitedValue": "..."
                }
              ]
            Severity:
              Optional: TRUE
              Type: Number
              MinValue: 0
              Description: |
                Any number specifying the severity of the risk.
                There is no limitation for the maximum value as it depends on national or local circumstances and methodology used to assess the risk.
            Probability:
              Optional: TRUE
              Type: Number
              MinValue: 0
              Description: |
                Any number specifying the probability of the risk.
                There is no limitation for the maximum value as it depends on national or local circumstances and methodology used to assess the risk.
            RiskLevel:
              Optional: TRUE
              Type: Number
              MinValue: 0
              Description: |
                Any number specifying the level of the risk.
                There is no limitation for the maximum value as it depends on national or local circumstances and methodology used to assess the risk.
        # Assessment:
        #   Description: Assessment of project-related risks
        #   Properties:
        #     Name:
        #       Type: String
        #       Description: Short name of the risk assessment
        #     Assessment:
        #       Type: Def
        #       Definition: $defs.RiskAssessment
        #       Description: Assessment of risks associated to this task.

Wastes:
  _sub:
    PackageTypes:
      Description: Definition of waste package types.
      Note: >
        {{Assets.Tangibles.Parts}} should be linked to package type...
      Properties:
        Name:
          Type: String
          Descripiton: Name of the waste package type.
        Mass:
          Type: Decimal
          Unit: kg
          Description: Mass of the empty package type.
        AdmissibleMass:
          Type: Decimal
          Unit: kg
          Description: Admissible total mass of the filled package type.
        ExternalVolume:
          Type: Decimal
          Unit: m3
          Description: External volume of the waste package type.
        AdmissibleVolume:
          Type: Decimal
          Unit: m3
          Description: "?"
          Note: Please explain
        UnitCostFactors:
          Type: Def
          Definition: $defs.UnitCostFactors
          Description: Various unit cost factors for this package type.
        Costs:
          Type: Def
          Definition: $defs.Costs
          Description: Various cost data (absolute values, not unit factors) for this package type.
    ManagementProcesses:
      Description: Tasks to be performed to manage a waste
      Properties:
        Name:
          Type: String
          Description: Name of the management process
        RegulatoryFrameworkId:
          Type: Reference
          ReferencedClass: Safety.Regulatory.Frameworks
          Description: Reference to the national regulatory framework
        TaskIds:
          Type: Array[RecordId]
          ReferencedClass: Tasks
          Description: Ordered list of tasks performed over a waste.
        UnitCostFactors:
          Type: Def
          Definition: $defs.UnitCostFactors
          Description: Various unit cost factors for this process.
        Costs:
          Type: Def
          Definition: $defs.Costs
          Description: Various cost data (absolute values, not unit factors) for this process.
    Sorters:
      Description: Sorters dynamicaly compare WACs and radiological characteristics of a waste and generate appropriate WM tasks.
      Properties:
        Name:
          Type: String
          Example: One-material sorter
        MaterialId:
          Type: Reference
          ReferencedClass: Materials
        ActivityLimit:
          Type: Def
          Definition: $defs.NuclideVector
          Description: Activity limit for the sorter
        InnerContaminationLimit:
          Type: Def
          Definition: $defs.NuclideVector
          Description: Inner contamination limit for the sorter
        OuterContaminationLimit:
          Type: Def
          Definition: $defs.NuclideVector
          Description: Outer contamination limit for the sorter
        ProcessingMethodId:
          Type: Reference
          ReferencedClass: Methods

Costs:
  _sub:
    UnitCostFactorSets:
      Description: |
        Different sets of unit cost factors.
      Properties:
        Name:
          Type: String
          Description: Name of the set.
        # GeneralCostFactors:
        #   Type: Object
        #   Description: Project-related general cost factors.
        #   Example: {
        #     "WorkingDaysPerYear": 1720,
        #     "DefaultContingency": 10,
        #   }
        UnitCostFactors:
          Type: Array[Def]
          Definition: $defs.UnitCostFactors
          Description: |
            Unit cost factors not specified elsewhere, in "CostFactors" properties.
    Estimations:
      Description: Cost estimations presented in ISDC structure
      Properties:
        RelatedRecordId:
          Type: Def
          Definition: $defs.RelatedRecord
          Description:
            ID of the record for which the estimation is calculated.
            E.g. an ID of the record from {{Tasks}}, {{Assets}} or {{Wastes}}.
        ISDCNumber:
          Type: String
          Example: "04.0502"
        Labour:
          Type: Decimal
          Description: Labour costs
          Unit: €
          MinValue: 0
        Investments:
          Type: Decimal
          Description: Investments
          Unit: €
          MinValue: 0
        Expenses:
          Type: Decimal
          Description: Expenses
          Unit: €
          MinValue: 0
        Contingency:
          Type: Decimal
          Description: Contingency
          Unit: €
          MinValue: 0
      OutputFrom:
        - AquilaCosting



$defs:
  _sub:
    CartesianPoint:
      Description: |
        A point defined by its coordinates in a two or three dimensional rectangular Cartesian coordinate system, or in a two dimensional parameter space. The entity is defined in a two or three dimensional space.
        See also IfcCartesianPoint (https://standards.buildingsmart.org/IFC/RELEASE/IFC2x3/TC1/HTML/ifcgeometryresource/lexical/ifccartesianpoint.htm)
      IsSimpleProperty: TRUE
      Type: Array[Decimal]
      # Description: |
      #   From IfcCartesianPoint: The first, second, and third coordinate of the point location. If placed in a two or three dimensional rectangular Cartesian coordinate system, Coordinates[1] is the X coordinate, Coordinates[2] is the Y coordinate, and Coordinates[3] is the Z coordinate.
    MeasuredQuantity:
      Properties:
        Quantity:
          Description: What is measured, (Dose, DoseRate, Activity, Temperature, ...)
          Example: DoseRate
        Unit:
          Type: String
          Description: The unit for the values. (mSv, mSv/h, GBq, C).
          Example: mSv/h
    MeasuredValue:
      Properties:
        Scalar:
          Type: Decimal
          Optional: TRUE
        List:
          Type: Array of Decimals
          Example: [123.45, 67.89]
          Optional: TRUE
        NuclideBased:
          Type: Key-Value Pair
          Example: {
            "Co-60": 2345,
            "Cs-137": 5678,
          }
          Optional: TRUE
        Activity: 
          Type: Object
          Example: {
            Total: 1234.67,
            NuclideVectorId: 6b6db141-1031-418e-9e00-6bde5d123439
          }
          Optional: TRUE
    IFCObjectReference:
      Properties:
        Model:
          Type: Reference
          ReferencedClass: Assets.Intangibles.Documents
          Description: reference to a IFC model where the object is visualized
        IfcGUID:
          Type: IfcGUID
          Description: GUID of the object in the IFC model
    RelatedRecord:
      Properties:
        Class:
          Type: Def
          Definition: $defs.ClassName
          Description: Name of the class which is related to this item.
        RecordId:
          Type: RecordId
          Description: ID of the record which represents the item.
    TeamMember:
      Properties:
        MemberType:
          Type: String
          Description: Name of the class which represents the type of the member.
          ValidValues: [
            "Actors.Persons",
            "Actors.Robots",
            "Actors.Teams",
          ]
        MemberId:
          Type: RecordId
          ReferencedClass: [Actors.Persons, Actors.Robots, Actors.Teams]
          Description: ID of the record which represents the team member.
    Measurements:
      Properties:
        MeasurementType:
          Type: String
          Description: Name of the class which represents the measurement.
          ValidValues: [
            "Assets.Intangibles.Measurements.CartesianMeasurements",
            "Assets.Intangibles.Measurements.CartesianMeasurementSets",
          ]
        MeasurementId:
          Type: RecordId
          Description: ID of the record which represents the measurement.
    # RiskAssessment:
    #   Properties:
    #     RiskId:
    #       Type: Reference
    #       ReferencedClass: Safety.Risks.Register
    #     Probability:
    #       Type: Decimal
    #       MinValue: 0
    #       Description: Probability of occurence of the risk. The value range depends on the methodology used for the risk assessment.
    #     Severity:
    #       Type: Decimal
    #       MinValue: 0
    #       Description: Severity of the risk. The value range depends on the methodology used for the risk assessment.
    #     RiskLevel:
    #       Type: Decimal
    #       MinValue: 0
    #       Description: Level = Severity (from Safety.Risks.Register) x Probability
    Costs:
      IsSimpleProperty: TRUE
      Type: Object
      Description: |
        Arbitrary object containing costs for a specific record.
        The structure of the object is not strictly specified and depends on a project and
        a type of a record to which it is related.
      Examples: [
        {
          "ProcurementPrice": 1234,
          "PartialDeprecation": 1234,
        },
        {
          "FixedInvestments": 1234,
          "FixedExpenses": 1234,
        }
      ]
    UnitCostFactors:
      IsSimpleProperty: TRUE
      Type: Object
      Description: |
        Arbitrary object containing cost factors for a specific record.
        The structure of the object is not strictly specified and depends on a project and
        a type of a record to which it is related.
      Examples: [
        {
          "DeprecationCostsPerHour": 1234,
          "CostPerTonne": 888,
          "TransportationUnitCostFactor": 567
        },
        {
          "HourlyInvestments": 1234,
          "HourlyExpenses": 1234,
          "Contingency": 20
        }
      ]
    # UnitCostFactors:
    #   Description: Structure for storing unit cost factors
    #   Properties:
    #     RelatedRecordId:
    #       Type: Def
    #       Definition: $defs.RelatedRecord
    #       Description:
    #         ID of the record for which the cost factor is linked.
    #         E.g. an ID of the record from {{Tasks}}, {{Assets}} or {{Wastes}}.
    #     CostFactors:
    #       Type: Object
    #       Description: |
    #         Arbitrary object for storing unit cost factors.
    #         The strucutre may vary, depending on the related record.
    #       Examples: [
    #         {
    #           "ProcurementPrice": 1234,
    #           "PartialDeprecation": 1234,
    #           "HourlyCost": 1234
    #         },
    #         {
    #           "DeprecationCosts": 1234,
    #         },
    #         {
    #           "FixedInvestments": 1234,
    #           "TimeBasedInvestments": 1234,
    #           "FixedExpenses": 1234,
    #           "TimeBasedExpenses": 1234,
    #           "Contingency": 20
    #         }
    #       ]
    NuclideVector:
      IsSimpleProperty: TRUE
      Type: Object
      Description: |
        A key-value pair with list of isotopes and their respective value.
        The value can represent different physical properties, e.g. relative amount, activity or contamination.
      Unit: [
        "Bq/kg",
        "Bq/m2",
        "relative amount",
        "..."
      ]
      Examples: [
        {
          "Co-60": 0.15,
          "Cs-137": 0.85
        },
        {
          "Ni-63": 3000000,
          "Nb-95": 10000,
        }
      ]
    Shape:
      Properties:
        Shape:
          Type: String
          ValidValues: [
            "Point",
            "Cube",
            "Cylinder",
          ]
          Description: Type of the shape
        Width:
          Type: Decimal
          MinValue: 0
          Optional: TRUE
          Description: Width of the shape, if applicable
        Height:
          Type: Decimal
          MinValue: 0
          Optional: TRUE
          Description: Height of the shape, if applicable
        Length:
          Type: Decimal
          MinValue: 0
          Optional: TRUE
          Description: Length of the shape, if applicable
        Radius:
          Type: Decimal
          MinValue: 0
          Optional: TRUE
          Description: Radius of the shape, if applicable
    ClassName:
      IsSimpleProperty: TRUE
      Type: String
      Format: Dot.Notated.ClassName
      ValidValues: Any existing API class name.
      Example: Any.Valid.ClassName
      Description: |
        Contains dot-notated name of any existing API class.<br/>
        <br/>
        Useful e.g. for categorization / characterization of a record if there is
        no sub-classes available or the sub-classes structure can be dynamic.<br/>
        <br/>
        E.g. in {{Methods}} or {{Applications}}.
    RecordInfo:
      Properties:
        CreatedOn:
          Type: DateTime
        CreatedBy:
          Type: String
        ModifiedOn:
          Type: DateTime
        ModifiedBy:
          Type: String
